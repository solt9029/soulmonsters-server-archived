// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateDeck {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Deck {
  id: ID!
  userId: String!
  name: String!
}

type DeckConnection {
  pageInfo: PageInfo!
  edges: [DeckEdge]!
  aggregate: AggregateDeck!
}

input DeckCreateInput {
  id: ID
  userId: String!
  name: String!
}

type DeckEdge {
  node: Deck!
  cursor: String!
}

enum DeckOrderByInput {
  id_ASC
  id_DESC
  userId_ASC
  userId_DESC
  name_ASC
  name_DESC
}

type DeckPreviousValues {
  id: ID!
  userId: String!
  name: String!
}

type DeckSubscriptionPayload {
  mutation: MutationType!
  node: Deck
  updatedFields: [String!]
  previousValues: DeckPreviousValues
}

input DeckSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DeckWhereInput
  AND: [DeckSubscriptionWhereInput!]
  OR: [DeckSubscriptionWhereInput!]
  NOT: [DeckSubscriptionWhereInput!]
}

input DeckUpdateInput {
  userId: String
  name: String
}

input DeckUpdateManyMutationInput {
  userId: String
  name: String
}

input DeckWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  userId: String
  userId_not: String
  userId_in: [String!]
  userId_not_in: [String!]
  userId_lt: String
  userId_lte: String
  userId_gt: String
  userId_gte: String
  userId_contains: String
  userId_not_contains: String
  userId_starts_with: String
  userId_not_starts_with: String
  userId_ends_with: String
  userId_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [DeckWhereInput!]
  OR: [DeckWhereInput!]
  NOT: [DeckWhereInput!]
}

input DeckWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createDeck(data: DeckCreateInput!): Deck!
  updateDeck(data: DeckUpdateInput!, where: DeckWhereUniqueInput!): Deck
  updateManyDecks(data: DeckUpdateManyMutationInput!, where: DeckWhereInput): BatchPayload!
  upsertDeck(where: DeckWhereUniqueInput!, create: DeckCreateInput!, update: DeckUpdateInput!): Deck!
  deleteDeck(where: DeckWhereUniqueInput!): Deck
  deleteManyDecks(where: DeckWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  deck(where: DeckWhereUniqueInput!): Deck
  decks(where: DeckWhereInput, orderBy: DeckOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Deck]!
  decksConnection(where: DeckWhereInput, orderBy: DeckOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DeckConnection!
  node(id: ID!): Node
}

type Subscription {
  deck(where: DeckSubscriptionWhereInput): DeckSubscriptionPayload
}
`